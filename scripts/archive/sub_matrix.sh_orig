###========================================
#!/bin/bash
###script to run an mpi job using 12-core or less (using only one 12 core node)
###set the job name
#PBS -N matrix_multiply
###specify the PI group for this job
###List of PI groups available to each user can be found with "va" command
#PBS -W group_list=ece677fall17
###Request email when job begins and ends
###PBS -m bea
###specify email address to use for notification
#PBS -M fermon@email.arizona.edu
###set the queue
#PBS -q windfall
#Set the number of nodes, cores, and memory that will be used for this job
#PBS -l select=1:ncpus=28:mem=1kb
###specify total cpu time required for this job, hhh:mm:ss
#PBS -l walltime=0:5:0
###total cputime = walltime * ncpus
#PBS -l cput=0:28:0
#PBS -l place=free:shared
###Load required modules if needed
### use 'module avail' for list of available modules
module load openmpi
#---------------------------------------------------------------------
#

EXEC_DIR="hw2"
EXEC="matrix_multiply"
OUTPUT=$EXEC\_out
OUTPUT_CHECK=$EXEC\_serial.txt
OUTPUT_DIR=$EXEC_`date +%Y%m%d`

mkdir $OUTPUT_DIR

cd ~/ece677/build_dir/$EXEC_DIR

./$EXEC --serial > $OUTPUT_CHECK

for NODES in 02 04 08 16 32 64
do
   rm $EXEC.e* $EXEC.o* $OUTPUT

   mpirun -n $NODES $EXEC > $OUTPUT
   
   cp $OUTPUT_CHECK tmp$OUTPUT_CHECK
   cp $OUTPUT tmp$OUTPUT
   
   sed -i -e "1d" tmp$OUTPUT_CHECK
   sed -i -e '1d;$d' tmp$OUTPUT

   if [[ `diff tmp$OUTPUT_CHECKtmp$OUTPUT` == "" ]]; then
       echo "$NODES::Success"
       echo "$NODES::Success" > status_$NODES.txt
   else
       echo "$NODES::Fail"
       echo "$NODES::Fail" > status_$NODES.txt
   fi
   
   cp $OUTPUT $OUTPUT_DIR/$OUTPUT\_$NODES.txt
   cp  status_$NODES.txt $OUTPUT_DIR

done
